%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /cray/css/u19/jan/src/3DFD/getModelInfo.c
Compiled : 2015-09-11  08:11:47
Compiler : Version 8.4.0.223
Ftnlx    : Version 8412 (libcif 84005)
Target   : x86-64
Command  : driver.cc -h cpu=haswell -h dynamic -D __CRAYCS -D __CRAY_HASWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -O 3 -h fp3 -h noomp -h list=a -I .
           -c getModelInfo.c
           -W l,--rpath=/opt/cray/cce/8.4.0.223/craylibs/x86-64
           -ibase-compiler /opt/cray/cce/8.4.0.223/CC/x86-64/compiler_include_ba
           se -isystem /opt/cray/cce/8.4.0.223/craylibs/x86-64/include
           -isystem /usr/local/cuda/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include-fixed
           -I /opt/cray/mvapich2_slurm/2.0.1.4/CRAY/8.4/include
           -I /opt/cray/libsci/13.2.0.1/CRAY/8.3/x86_64/include
           -I /global/opt/nvidia/cudatoolkit/7.0.28/include
           -I /opt/cray/cce/8.4.0.223/craylibs/x86-64/include

clx report
------------
Source   : /cray/css/u19/jan/src/3DFD/getModelInfo.c
Date     : 09/11/2015  08:11:48


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -h cache2,fp3,scalar3,thread2,vector3,mpi0,ipa3,noaggress         
           -h autoprefetch,noautothread,fusion2,nomsgs,nonegmsgs         
           -h nooverindex,pattern,unroll2,nozeroinc         
           -h noadd_paren,noupc,dwarf,nofp_trap,nofunc_trace         
           -h noomp_analyze,noomp_trace,nopat_trace         
           -h noomp,noomp_acc,noacc         
           -h c99,noexceptions,nostrict,noinfinitevl         
           -h notolerant,gnu         
           -h flex_mp=default         
           -h cpu=x86-64,haswell
           -h network=gemini         
           -K trap=none 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.            #define _FILE_OFFSET_BITS 64
    2.            #define _LARGEFILE_SOURCE
    3.            #define _LARGEFILE64_SOURCE
    4.            
    5.            #include <assert.h>
    6.            #include <stdio.h>
    7.            #include <stdlib.h>
    8.            #include <errno.h>
    9.            #include <math.h>
   10.            #include "par.h"
   11.            #include "segy.h"
   12.            
   13.            #define MAX(x,y) ((x) > (y) ? (x) : (y))
   14.            #define MIN(x,y) ((x) < (y) ? (x) : (y))
   15.            #define NINT(x) ((int)((x)>0.0?(x)+0.5:(x)-0.5))
   16.            
   17.            /**
   18.            *  reads gridded model file to compute minimum and maximum values and sampling intervals
   19.            *
   20.            *   AUTHOR:
   21.            *           Jan Thorbecke (janth@xs4all.nl)
   22.            *           The Netherlands 
   23.            **/
   24.            
   25.            int getModelInfo(char *file_name, int *n1, int *n2, float *d1, float *d2, float *f1, float *f2, float *min, float *max, int *axis, int zeroch, int verbose)
   26.            {
   27.                FILE    *fp;
   28.                size_t  nread;
   29.            	off_t bytes, ret, trace_sz, ntraces;
   30.                int i, itrace, one_shot;
   31.                float *trace, cmin;
   32.                segy hdr;
   33.                
   34.  +             fp = fopen( file_name, "r" );
   35.  +             assert( fp != NULL);
   36.  +             nread = fread( &hdr, 1, TRCBYTES, fp );
   37.  +             assert(nread == TRCBYTES);
   38.  +             ret = fseeko( fp, 0, SEEK_END );
   39.  +         	if (ret<0) perror("fseeko");
   40.  +             bytes = ftello( fp );
   41.            
   42.            	*n1 = hdr.ns;
   43.            	*d1 = hdr.d1;
   44.            	*d2 = hdr.d2;
   45.            	*f1 = hdr.f1;
   46.            	*f2 = hdr.f2;
   47.            
   48.            	if ( NINT(100.0*((*d1)/(*d2)))!=100 ) {
   49.  +         		verr("dx and dz are different in the model !");
   50.            	}
   51.            	if ( NINT(1000.0*(*d1))==0 ) {
   52.  +         		if(!getparfloat("dx",d1)) {
   53.  +         			verr("dx is equal to zero use parameter dx= to set value");
   54.            		}
   55.            		*d2 = *d1;
   56.            	}
   57.                trace_sz = sizeof(float)*(*n1)+TRCBYTES;
   58.                ntraces  = (int) (bytes/trace_sz);
   59.            	*n2 = ntraces;
   60.            
   61.                /* check to find out min and max values gather */
   62.            
   63.                one_shot = 1;
   64.                itrace = 0;
   65.                trace = (float *)malloc(trace_sz);
   66.  +             fseeko( fp, TRCBYTES, SEEK_SET );
   67.  +         	nread = fread( trace, sizeof(float), hdr.ns, fp );
   68.  +         	assert (nread == hdr.ns);
   69.  +             fseeko( fp, TRCBYTES, SEEK_SET );
   70.            
   71.            	if (hdr.trid == TRID_DEPTH)  *axis = 1; /* samples are z-axis */
   72.            	else *axis = 0; /* sample direction respresents the x-axis */
   73.            
   74.            	i=0; cmin=trace[0];
   75.  + 1----<> 	while ( ( (cmin==0.0) && zeroch) && (i<hdr.ns) ) cmin=trace[i++];
   76.            
   77.            	*max = cmin;
   78.            	*min = cmin;
   79.            	/* keep on reading traces until there are no more traces (nread==0) */
   80.  + 1-----<     while (one_shot) {
   81.  + 1               nread = fread( trace, sizeof(float), hdr.ns, fp );
   82.  + 1               assert (nread == hdr.ns);
   83.  + 1 r4--< 		for (i=0;i<hdr.ns;i++) {
   84.    1 r4    			*max = MAX(trace[i],*max);
   85.    1 r4    			cmin = MIN(trace[i],*min);
   86.    1 r4                if (zeroch) {
   87.    1 r4    				if (cmin!=0.0) *min = MIN(*min, cmin);
   88.    1 r4    			}
   89.    1 r4    			else {
   90.    1 r4    				*min = cmin;
   91.    1 r4    			}
   92.    1 r4--> 		}
   93.  + 1               nread = fread( &hdr, 1, TRCBYTES, fp );
   94.    1               if (nread==0) break;
   95.    1----->     }
   96.  +             fclose(fp);
   97.                free(trace);
   98.            
   99.            	if (verbose>2) {
  100.  +         		vmess("For file %s", file_name);
  101.  +         		vmess("nz=%d nx=%d", *n1, *n2);
  102.  +         		vmess("dz=%f dx=%f", *d1, *d2);
  103.  +         		vmess("min=%f max=%f", *min, *max);
  104.  +         		vmess("zstart=%f xstart=%f", *f1, *f2);
  105.  +         		if (*axis) vmess("sample represent z-axis\n");
  106.  +         		else vmess("sample represent x-axis\n");
  107.            	}
  108.                return 0;
  109.            }
  110.            

CC-3021 CC: IPA File = getModelInfo.c, Line = 34 
  "fopen" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 35 
  "__assert_fail" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 36 
  "fread" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 37 
  "__assert_fail" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 38 
  "fseeko" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 39 
  "perror" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 40 
  "ftello" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 49 
  "verr" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 52 
  "getparfloat" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 53 
  "verr" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 66 
  "fseeko" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 67 
  "fread" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 68 
  "__assert_fail" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 69 
  "fseeko" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-6334 CC: VECTOR File = getModelInfo.c, Line = 75 
  A loop was not vectorized because it contains multiple potential exits.

CC-6287 CC: VECTOR File = getModelInfo.c, Line = 80 
  A loop was not vectorized because it contains a call to function "fread" on line 81.

CC-3021 CC: IPA File = getModelInfo.c, Line = 81 
  "fread" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 82 
  "__assert_fail" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-6005 CC: SCALAR File = getModelInfo.c, Line = 83 
  A loop was unrolled 4 times.

CC-6290 CC: VECTOR File = getModelInfo.c, Line = 83 
  A loop was not vectorized because a recurrence was found between "trace" and "min" at line 90.

CC-3021 CC: IPA File = getModelInfo.c, Line = 93 
  "fread" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 96 
  "fclose" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 100 
  "vmess" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 101 
  "vmess" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 102 
  "vmess" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 103 
  "vmess" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 104 
  "vmess" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 105 
  "vmess" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = getModelInfo.c, Line = 106 
  "vmess" (called from "getModelInfo") was not inlined because the compiler was unable to locate the routine.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
