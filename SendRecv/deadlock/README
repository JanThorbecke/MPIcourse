Exercise 4 Deadlock
Find out what the program deadlock (.c or .f90) is supposed to do. Run it with two processors and see what happens.

mpicc deadlock.c -o deadlock
sbatch job.slurm
check the output of slurm in the file slurm-$JOBID.out
or
mpirun -n 2 ./deadlock

if your jobs does not finish you can can remove (all your jobs from the queue) with
scancel -u $USER
or only the job just submitted with
scancel JOBID

a) Why does the program get stuck?
b) Reorder the sends and receives in such a way that there is no deadlock.
   The answer can be found in deadlock_sol_b.c

c) Replace the standard sends with non-blocking sends to avoid deadlocking.
The calls are:

                MPI_Irecv(inbuf,n,MPI_DOUBLE,x,x,MPI_COMM_WORLD,req);
                MPI_Isend(outbuf,n,MPI_DOUBLE,x,x,MPI_COMM_WORLD,req+1);
                MPI_Waitall(2,req,status);
                MPI_Get_count(&(status[0]),MPI_DOUBLE,&count);

and replace the 'x' in each process; the above commands are implemented for each process.
   The answer can be found in deadlock_sol_c.c

d) Replace the sends and receives with MPI_SENDRECV.
The calls are:

          MPI_Sendrecv(outbuf,n,MPI_DOUBLE,x,0,
                       inbuf,n,MPI_DOUBLE,x,1,MPI_COMM_WORLD,&status);
          MPI_Get_count(&status,MPI_DOUBLE,&count);

and replace the 'x' in each process; the above commands are implemented for each process.
   The answer can be found in deadlock_sol_d.c

Extra
e) Change the data to be communicated from 10^6 to 1 in the original program and run again - is there still a deadlock?

